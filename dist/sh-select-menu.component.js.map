{"version":3,"file":"sh-select-menu.component.js","sourceRoot":"","sources":["../src/sh-select-menu.component.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,sCAAqH;AACrH,mDAAwD;AAmDxD;IAlDA;QAqDc,kBAAa,GAAqB,IAAI,mBAAY,EAAO,CAAC;QAEpE,SAAI,GAAO,IAAI,CAAC;IAkBpB,CAAC;IAhBY,sBAAI,uCAAI;aAAR,UAAS,GAAS;YACvB,EAAE,CAAA,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAA,CAAC;gBACtB,IAAI,CAAC,gBAAgB,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAA;YACnD,CAAC;YAED,IAAI,CAAC,KAAK,GAAG,GAAG,CAAC;YAEjB,EAAE,CAAA,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC;gBACvB,IAAI,CAAC,gBAAgB,CAAC,OAAO,EAAE,CAAC;YACpC,CAAC;QACL,CAAC;;;OAAA;IAAA,CAAC;IAEF,8CAAc,GAAd,UAAe,GAAG;QACd,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACjC,CAAC;IApBQ;QAAR,YAAK,EAAE;;iEAAsB;IACrB;QAAR,YAAK,EAAE;;yDAAgB;IACd;QAAT,aAAM,EAAE;kCAAe,mBAAY;gEAAgC;IACjC;QAAlC,gBAAS,CAAC,uCAAsB,CAAC;kCAAkB,uCAAsB;mEAAC;IAGlE;QAAR,YAAK,EAAE;;;qDAUP;IAjBQ,qBAAqB;QAlDjC,gBAAS,CAAC;YACP,QAAQ,EAAE,gBAAgB;YAC1B,eAAe,EAAE,8BAAuB,CAAC,MAAM;YAC/C,QAAQ,EAAG,s2BAcA;YACX,MAAM,EAAC,CAAC,4lBA8BV,CAAC;SACF,CAAC;OACW,qBAAqB,CAuBjC;IAAD,4BAAC;CAAA,AAvBD,IAuBC;AAvBY,sDAAqB","sourcesContent":["import {Component, Input, Output, EventEmitter, ViewChild, ElementRef, ChangeDetectionStrategy} from \"@angular/core\";\r\nimport {VirtualScrollComponent} from \"./virtual-scroll\";\r\n@Component({\r\n    selector: 'sh-select-menu',\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    template:  `\r\n        <div class=\"menu\" *ngIf=\"isOpen && _rows\" style=\"min-height: 35px;background-color: white\">\r\n          <!--virtual-->\r\n          <virtual-scroll [items]=\"_rows\" (update)=\"viewPortItems = $event\"\r\n            [style.height]=\"math.min(290,38 * _rows.length) + 'px'\"\r\n            style=\"display: block\">         \r\n            <div class=\"item\"\r\n                 *ngFor=\"let row of viewPortItems\"\r\n                 [class.selected]=\"selectedValues?.indexOf(row) !== -1\"\r\n                 (click)=\"toggleSelected(row)\">\r\n                         <i class=\"dropdown-icon\" [ngClass]=\"{'dropdown-icon-check': selectedValues?.indexOf(row) !== -1, 'dropdown-icon-check-empty':selectedValues?.indexOf(row) == -1}\" ></i>\r\n                         <span>{{row.name || row}}</span>\r\n            </div>\r\n          </virtual-scroll>\r\n        </div>`,\r\n    styles:[`.menu{\r\n  margin: 0;\r\n  padding: 0;\r\n  position: absolute;\r\n  background-color: white;\r\n  width: 100%;\r\n  max-height: 300px;\r\n  overflow: auto;\r\n  box-sizing: border-box;\r\n  z-index: 999;\r\n  box-shadow: 0 2px 3px 0 rgba(34,36,38,.15);\r\n  border-bottom: 1px solid rgba(34,36,38,.15);\r\n  border-left: 1px solid rgba(34,36,38,.15);\r\n  border-right: 1px solid rgba(34,36,38,.15);\r\n  border-radius: 0 0 2px 2px;\r\n  min-width: max-content;\r\n}\r\n\r\n.item{\r\n  padding: 4px;\r\n  cursor: pointer;\r\n  white-space: nowrap;\r\n}\r\n.item:hover{\r\n  background-color: #efefef;\r\n}\r\n\r\n\r\n.item.selected{\r\n  font-weight: 900;\r\n}`]\r\n})\r\nexport class ShSelectMenuComponent{\r\n    @Input() selectedValues:any[];\r\n    @Input() isOpen:boolean;\r\n    @Output() noToggleClick:EventEmitter<any> = new EventEmitter<any>();\r\n    @ViewChild(VirtualScrollComponent) virtualScrollElm:VirtualScrollComponent;\r\n    math:any = Math;\r\n    _rows:any[];\r\n    @Input() set rows(val:any[]){\r\n        if(this.virtualScrollElm){\r\n            this.virtualScrollElm.scrollInto(this._rows[0])\r\n        }\r\n\r\n        this._rows = val;\r\n\r\n        if(this.virtualScrollElm) {\r\n            this.virtualScrollElm.refresh();\r\n        }\r\n    };\r\n\r\n    toggleSelected(row){\r\n        this.noToggleClick.emit(row);\r\n    }\r\n\r\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}